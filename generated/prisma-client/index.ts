// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  payment: (where?: PaymentWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  payment: (where: PaymentWhereUniqueInput) => PaymentNullablePromise;
  payments: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Payment>;
  paymentsConnection: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PaymentConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPayment: (data: PaymentCreateInput) => PaymentPromise;
  updatePayment: (args: {
    data: PaymentUpdateInput;
    where: PaymentWhereUniqueInput;
  }) => PaymentPromise;
  updateManyPayments: (args: {
    data: PaymentUpdateManyMutationInput;
    where?: PaymentWhereInput;
  }) => BatchPayloadPromise;
  upsertPayment: (args: {
    where: PaymentWhereUniqueInput;
    create: PaymentCreateInput;
    update: PaymentUpdateInput;
  }) => PaymentPromise;
  deletePayment: (where: PaymentWhereUniqueInput) => PaymentPromise;
  deleteManyPayments: (where?: PaymentWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  payment: (
    where?: PaymentSubscriptionWhereInput
  ) => PaymentSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PaymentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "tok_ASC"
  | "tok_DESC"
  | "tnumber_ASC"
  | "tnumber_DESC"
  | "mname_ASC"
  | "mname_DESC"
  | "mid_ASC"
  | "mid_DESC"
  | "spay_ASC"
  | "spay_DESC"
  | "trno_ASC"
  | "trno_DESC"
  | "reg_date_ASC"
  | "reg_date_DESC"
  | "pay_dtm_ASC"
  | "pay_dtm_DESC"
  | "content_ASC"
  | "content_DESC"
  | "bpay_ASC"
  | "bpay_DESC"
  | "qpay_ASC"
  | "qpay_DESC"
  | "brefund_ASC"
  | "brefund_DESC"
  | "qrefund_ASC"
  | "qrefund_DESC"
  | "accea_ASC"
  | "accea_DESC"
  | "qaccea_ASC"
  | "qaccea_DESC"
  | "req_day_ASC"
  | "req_day_DESC"
  | "req_qday_ASC"
  | "req_qday_DESC"
  | "endday_ASC"
  | "endday_DESC"
  | "qendday_ASC"
  | "qendday_DESC"
  | "msg2_ASC"
  | "msg2_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PaymentStatus = "WAIT" | "ACCEPTED" | "CANCELED";

export type UserOrderByInput = "id_ASC" | "id_DESC" | "name_ASC" | "name_DESC";

export interface UserUpdateInput {
  name?: Maybe<String>;
}

export interface PaymentUpdateInput {
  tok?: Maybe<PaymentStatus>;
  tnumber?: Maybe<Int>;
  mname?: Maybe<String>;
  mid?: Maybe<String>;
  spay?: Maybe<Int>;
  trno?: Maybe<String>;
  reg_date?: Maybe<DateTimeInput>;
  pay_dtm?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  bpay?: Maybe<Int>;
  qpay?: Maybe<Int>;
  brefund?: Maybe<Int>;
  qrefund?: Maybe<Int>;
  accea?: Maybe<Int>;
  qaccea?: Maybe<Int>;
  req_day?: Maybe<DateTimeInput>;
  req_qday?: Maybe<DateTimeInput>;
  endday?: Maybe<DateTimeInput>;
  qendday?: Maybe<DateTimeInput>;
  msg2?: Maybe<String>;
}

export type PaymentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PaymentCreateInput {
  id?: Maybe<ID_Input>;
  tok?: Maybe<PaymentStatus>;
  tnumber?: Maybe<Int>;
  mname?: Maybe<String>;
  mid?: Maybe<String>;
  spay?: Maybe<Int>;
  trno?: Maybe<String>;
  reg_date?: Maybe<DateTimeInput>;
  pay_dtm?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  bpay?: Maybe<Int>;
  qpay?: Maybe<Int>;
  brefund?: Maybe<Int>;
  qrefund?: Maybe<Int>;
  accea?: Maybe<Int>;
  qaccea?: Maybe<Int>;
  req_day?: Maybe<DateTimeInput>;
  req_qday?: Maybe<DateTimeInput>;
  endday?: Maybe<DateTimeInput>;
  qendday?: Maybe<DateTimeInput>;
  msg2?: Maybe<String>;
}

export interface PaymentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  tok?: Maybe<PaymentStatus>;
  tok_not?: Maybe<PaymentStatus>;
  tok_in?: Maybe<PaymentStatus[] | PaymentStatus>;
  tok_not_in?: Maybe<PaymentStatus[] | PaymentStatus>;
  tnumber?: Maybe<Int>;
  tnumber_not?: Maybe<Int>;
  tnumber_in?: Maybe<Int[] | Int>;
  tnumber_not_in?: Maybe<Int[] | Int>;
  tnumber_lt?: Maybe<Int>;
  tnumber_lte?: Maybe<Int>;
  tnumber_gt?: Maybe<Int>;
  tnumber_gte?: Maybe<Int>;
  mname?: Maybe<String>;
  mname_not?: Maybe<String>;
  mname_in?: Maybe<String[] | String>;
  mname_not_in?: Maybe<String[] | String>;
  mname_lt?: Maybe<String>;
  mname_lte?: Maybe<String>;
  mname_gt?: Maybe<String>;
  mname_gte?: Maybe<String>;
  mname_contains?: Maybe<String>;
  mname_not_contains?: Maybe<String>;
  mname_starts_with?: Maybe<String>;
  mname_not_starts_with?: Maybe<String>;
  mname_ends_with?: Maybe<String>;
  mname_not_ends_with?: Maybe<String>;
  mid?: Maybe<String>;
  mid_not?: Maybe<String>;
  mid_in?: Maybe<String[] | String>;
  mid_not_in?: Maybe<String[] | String>;
  mid_lt?: Maybe<String>;
  mid_lte?: Maybe<String>;
  mid_gt?: Maybe<String>;
  mid_gte?: Maybe<String>;
  mid_contains?: Maybe<String>;
  mid_not_contains?: Maybe<String>;
  mid_starts_with?: Maybe<String>;
  mid_not_starts_with?: Maybe<String>;
  mid_ends_with?: Maybe<String>;
  mid_not_ends_with?: Maybe<String>;
  spay?: Maybe<Int>;
  spay_not?: Maybe<Int>;
  spay_in?: Maybe<Int[] | Int>;
  spay_not_in?: Maybe<Int[] | Int>;
  spay_lt?: Maybe<Int>;
  spay_lte?: Maybe<Int>;
  spay_gt?: Maybe<Int>;
  spay_gte?: Maybe<Int>;
  trno?: Maybe<String>;
  trno_not?: Maybe<String>;
  trno_in?: Maybe<String[] | String>;
  trno_not_in?: Maybe<String[] | String>;
  trno_lt?: Maybe<String>;
  trno_lte?: Maybe<String>;
  trno_gt?: Maybe<String>;
  trno_gte?: Maybe<String>;
  trno_contains?: Maybe<String>;
  trno_not_contains?: Maybe<String>;
  trno_starts_with?: Maybe<String>;
  trno_not_starts_with?: Maybe<String>;
  trno_ends_with?: Maybe<String>;
  trno_not_ends_with?: Maybe<String>;
  reg_date?: Maybe<DateTimeInput>;
  reg_date_not?: Maybe<DateTimeInput>;
  reg_date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  reg_date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  reg_date_lt?: Maybe<DateTimeInput>;
  reg_date_lte?: Maybe<DateTimeInput>;
  reg_date_gt?: Maybe<DateTimeInput>;
  reg_date_gte?: Maybe<DateTimeInput>;
  pay_dtm?: Maybe<DateTimeInput>;
  pay_dtm_not?: Maybe<DateTimeInput>;
  pay_dtm_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  pay_dtm_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  pay_dtm_lt?: Maybe<DateTimeInput>;
  pay_dtm_lte?: Maybe<DateTimeInput>;
  pay_dtm_gt?: Maybe<DateTimeInput>;
  pay_dtm_gte?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  bpay?: Maybe<Int>;
  bpay_not?: Maybe<Int>;
  bpay_in?: Maybe<Int[] | Int>;
  bpay_not_in?: Maybe<Int[] | Int>;
  bpay_lt?: Maybe<Int>;
  bpay_lte?: Maybe<Int>;
  bpay_gt?: Maybe<Int>;
  bpay_gte?: Maybe<Int>;
  qpay?: Maybe<Int>;
  qpay_not?: Maybe<Int>;
  qpay_in?: Maybe<Int[] | Int>;
  qpay_not_in?: Maybe<Int[] | Int>;
  qpay_lt?: Maybe<Int>;
  qpay_lte?: Maybe<Int>;
  qpay_gt?: Maybe<Int>;
  qpay_gte?: Maybe<Int>;
  brefund?: Maybe<Int>;
  brefund_not?: Maybe<Int>;
  brefund_in?: Maybe<Int[] | Int>;
  brefund_not_in?: Maybe<Int[] | Int>;
  brefund_lt?: Maybe<Int>;
  brefund_lte?: Maybe<Int>;
  brefund_gt?: Maybe<Int>;
  brefund_gte?: Maybe<Int>;
  qrefund?: Maybe<Int>;
  qrefund_not?: Maybe<Int>;
  qrefund_in?: Maybe<Int[] | Int>;
  qrefund_not_in?: Maybe<Int[] | Int>;
  qrefund_lt?: Maybe<Int>;
  qrefund_lte?: Maybe<Int>;
  qrefund_gt?: Maybe<Int>;
  qrefund_gte?: Maybe<Int>;
  accea?: Maybe<Int>;
  accea_not?: Maybe<Int>;
  accea_in?: Maybe<Int[] | Int>;
  accea_not_in?: Maybe<Int[] | Int>;
  accea_lt?: Maybe<Int>;
  accea_lte?: Maybe<Int>;
  accea_gt?: Maybe<Int>;
  accea_gte?: Maybe<Int>;
  qaccea?: Maybe<Int>;
  qaccea_not?: Maybe<Int>;
  qaccea_in?: Maybe<Int[] | Int>;
  qaccea_not_in?: Maybe<Int[] | Int>;
  qaccea_lt?: Maybe<Int>;
  qaccea_lte?: Maybe<Int>;
  qaccea_gt?: Maybe<Int>;
  qaccea_gte?: Maybe<Int>;
  req_day?: Maybe<DateTimeInput>;
  req_day_not?: Maybe<DateTimeInput>;
  req_day_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  req_day_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  req_day_lt?: Maybe<DateTimeInput>;
  req_day_lte?: Maybe<DateTimeInput>;
  req_day_gt?: Maybe<DateTimeInput>;
  req_day_gte?: Maybe<DateTimeInput>;
  req_qday?: Maybe<DateTimeInput>;
  req_qday_not?: Maybe<DateTimeInput>;
  req_qday_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  req_qday_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  req_qday_lt?: Maybe<DateTimeInput>;
  req_qday_lte?: Maybe<DateTimeInput>;
  req_qday_gt?: Maybe<DateTimeInput>;
  req_qday_gte?: Maybe<DateTimeInput>;
  endday?: Maybe<DateTimeInput>;
  endday_not?: Maybe<DateTimeInput>;
  endday_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endday_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  endday_lt?: Maybe<DateTimeInput>;
  endday_lte?: Maybe<DateTimeInput>;
  endday_gt?: Maybe<DateTimeInput>;
  endday_gte?: Maybe<DateTimeInput>;
  qendday?: Maybe<DateTimeInput>;
  qendday_not?: Maybe<DateTimeInput>;
  qendday_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  qendday_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  qendday_lt?: Maybe<DateTimeInput>;
  qendday_lte?: Maybe<DateTimeInput>;
  qendday_gt?: Maybe<DateTimeInput>;
  qendday_gte?: Maybe<DateTimeInput>;
  msg2?: Maybe<String>;
  msg2_not?: Maybe<String>;
  msg2_in?: Maybe<String[] | String>;
  msg2_not_in?: Maybe<String[] | String>;
  msg2_lt?: Maybe<String>;
  msg2_lte?: Maybe<String>;
  msg2_gt?: Maybe<String>;
  msg2_gte?: Maybe<String>;
  msg2_contains?: Maybe<String>;
  msg2_not_contains?: Maybe<String>;
  msg2_starts_with?: Maybe<String>;
  msg2_not_starts_with?: Maybe<String>;
  msg2_ends_with?: Maybe<String>;
  msg2_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
  OR?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
  NOT?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
}

export interface PaymentUpdateManyMutationInput {
  tok?: Maybe<PaymentStatus>;
  tnumber?: Maybe<Int>;
  mname?: Maybe<String>;
  mid?: Maybe<String>;
  spay?: Maybe<Int>;
  trno?: Maybe<String>;
  reg_date?: Maybe<DateTimeInput>;
  pay_dtm?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  bpay?: Maybe<Int>;
  qpay?: Maybe<Int>;
  brefund?: Maybe<Int>;
  qrefund?: Maybe<Int>;
  accea?: Maybe<Int>;
  qaccea?: Maybe<Int>;
  req_day?: Maybe<DateTimeInput>;
  req_qday?: Maybe<DateTimeInput>;
  endday?: Maybe<DateTimeInput>;
  qendday?: Maybe<DateTimeInput>;
  msg2?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface PaymentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PaymentWhereInput>;
  AND?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
  OR?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
  NOT?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PaymentConnection {
  pageInfo: PageInfo;
  edges: PaymentEdge[];
}

export interface PaymentConnectionPromise
  extends Promise<PaymentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PaymentEdge>>() => T;
  aggregate: <T = AggregatePaymentPromise>() => T;
}

export interface PaymentConnectionSubscription
  extends Promise<AsyncIterator<PaymentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PaymentEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePaymentSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PaymentSubscriptionPayload {
  mutation: MutationType;
  node: Payment;
  updatedFields: String[];
  previousValues: PaymentPreviousValues;
}

export interface PaymentSubscriptionPayloadPromise
  extends Promise<PaymentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PaymentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PaymentPreviousValuesPromise>() => T;
}

export interface PaymentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PaymentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PaymentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PaymentPreviousValuesSubscription>() => T;
}

export interface PaymentPreviousValues {
  id: ID_Output;
  tok: PaymentStatus;
  tnumber?: Int;
  mname?: String;
  mid?: String;
  spay: Int;
  trno?: String;
  reg_date: DateTimeOutput;
  pay_dtm: DateTimeOutput;
  content?: String;
  bpay: Int;
  qpay: Int;
  brefund: Int;
  qrefund: Int;
  accea: Int;
  qaccea: Int;
  req_day?: DateTimeOutput;
  req_qday?: DateTimeOutput;
  endday: DateTimeOutput;
  qendday: DateTimeOutput;
  msg2?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PaymentPreviousValuesPromise
  extends Promise<PaymentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tok: () => Promise<PaymentStatus>;
  tnumber: () => Promise<Int>;
  mname: () => Promise<String>;
  mid: () => Promise<String>;
  spay: () => Promise<Int>;
  trno: () => Promise<String>;
  reg_date: () => Promise<DateTimeOutput>;
  pay_dtm: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  bpay: () => Promise<Int>;
  qpay: () => Promise<Int>;
  brefund: () => Promise<Int>;
  qrefund: () => Promise<Int>;
  accea: () => Promise<Int>;
  qaccea: () => Promise<Int>;
  req_day: () => Promise<DateTimeOutput>;
  req_qday: () => Promise<DateTimeOutput>;
  endday: () => Promise<DateTimeOutput>;
  qendday: () => Promise<DateTimeOutput>;
  msg2: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PaymentPreviousValuesSubscription
  extends Promise<AsyncIterator<PaymentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tok: () => Promise<AsyncIterator<PaymentStatus>>;
  tnumber: () => Promise<AsyncIterator<Int>>;
  mname: () => Promise<AsyncIterator<String>>;
  mid: () => Promise<AsyncIterator<String>>;
  spay: () => Promise<AsyncIterator<Int>>;
  trno: () => Promise<AsyncIterator<String>>;
  reg_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  pay_dtm: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
  bpay: () => Promise<AsyncIterator<Int>>;
  qpay: () => Promise<AsyncIterator<Int>>;
  brefund: () => Promise<AsyncIterator<Int>>;
  qrefund: () => Promise<AsyncIterator<Int>>;
  accea: () => Promise<AsyncIterator<Int>>;
  qaccea: () => Promise<AsyncIterator<Int>>;
  req_day: () => Promise<AsyncIterator<DateTimeOutput>>;
  req_qday: () => Promise<AsyncIterator<DateTimeOutput>>;
  endday: () => Promise<AsyncIterator<DateTimeOutput>>;
  qendday: () => Promise<AsyncIterator<DateTimeOutput>>;
  msg2: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PaymentEdge {
  node: Payment;
  cursor: String;
}

export interface PaymentEdgePromise extends Promise<PaymentEdge>, Fragmentable {
  node: <T = PaymentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PaymentEdgeSubscription
  extends Promise<AsyncIterator<PaymentEdge>>,
    Fragmentable {
  node: <T = PaymentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Payment {
  id: ID_Output;
  tok: PaymentStatus;
  tnumber?: Int;
  mname?: String;
  mid?: String;
  spay: Int;
  trno?: String;
  reg_date: DateTimeOutput;
  pay_dtm: DateTimeOutput;
  content?: String;
  bpay: Int;
  qpay: Int;
  brefund: Int;
  qrefund: Int;
  accea: Int;
  qaccea: Int;
  req_day?: DateTimeOutput;
  req_qday?: DateTimeOutput;
  endday: DateTimeOutput;
  qendday: DateTimeOutput;
  msg2?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PaymentPromise extends Promise<Payment>, Fragmentable {
  id: () => Promise<ID_Output>;
  tok: () => Promise<PaymentStatus>;
  tnumber: () => Promise<Int>;
  mname: () => Promise<String>;
  mid: () => Promise<String>;
  spay: () => Promise<Int>;
  trno: () => Promise<String>;
  reg_date: () => Promise<DateTimeOutput>;
  pay_dtm: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  bpay: () => Promise<Int>;
  qpay: () => Promise<Int>;
  brefund: () => Promise<Int>;
  qrefund: () => Promise<Int>;
  accea: () => Promise<Int>;
  qaccea: () => Promise<Int>;
  req_day: () => Promise<DateTimeOutput>;
  req_qday: () => Promise<DateTimeOutput>;
  endday: () => Promise<DateTimeOutput>;
  qendday: () => Promise<DateTimeOutput>;
  msg2: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PaymentSubscription
  extends Promise<AsyncIterator<Payment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tok: () => Promise<AsyncIterator<PaymentStatus>>;
  tnumber: () => Promise<AsyncIterator<Int>>;
  mname: () => Promise<AsyncIterator<String>>;
  mid: () => Promise<AsyncIterator<String>>;
  spay: () => Promise<AsyncIterator<Int>>;
  trno: () => Promise<AsyncIterator<String>>;
  reg_date: () => Promise<AsyncIterator<DateTimeOutput>>;
  pay_dtm: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
  bpay: () => Promise<AsyncIterator<Int>>;
  qpay: () => Promise<AsyncIterator<Int>>;
  brefund: () => Promise<AsyncIterator<Int>>;
  qrefund: () => Promise<AsyncIterator<Int>>;
  accea: () => Promise<AsyncIterator<Int>>;
  qaccea: () => Promise<AsyncIterator<Int>>;
  req_day: () => Promise<AsyncIterator<DateTimeOutput>>;
  req_qday: () => Promise<AsyncIterator<DateTimeOutput>>;
  endday: () => Promise<AsyncIterator<DateTimeOutput>>;
  qendday: () => Promise<AsyncIterator<DateTimeOutput>>;
  msg2: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PaymentNullablePromise
  extends Promise<Payment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tok: () => Promise<PaymentStatus>;
  tnumber: () => Promise<Int>;
  mname: () => Promise<String>;
  mid: () => Promise<String>;
  spay: () => Promise<Int>;
  trno: () => Promise<String>;
  reg_date: () => Promise<DateTimeOutput>;
  pay_dtm: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  bpay: () => Promise<Int>;
  qpay: () => Promise<Int>;
  brefund: () => Promise<Int>;
  qrefund: () => Promise<Int>;
  accea: () => Promise<Int>;
  qaccea: () => Promise<Int>;
  req_day: () => Promise<DateTimeOutput>;
  req_qday: () => Promise<DateTimeOutput>;
  endday: () => Promise<DateTimeOutput>;
  qendday: () => Promise<DateTimeOutput>;
  msg2: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregatePayment {
  count: Int;
}

export interface AggregatePaymentPromise
  extends Promise<AggregatePayment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePaymentSubscription
  extends Promise<AsyncIterator<AggregatePayment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "PaymentStatus",
    embedded: false
  },
  {
    name: "Payment",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/rhkdgns9489-b90313/careda/dev`
});
export const prisma = new Prisma();
